package de.dis2012.core.log;

import java.util.Hashtable;

public class Puffer {
	Hashtable<Integer, Logdatensatz> puffer = new Hashtable<Integer, Logdatensatz>();
	int status;
	
	Puffer(){
		// initialisiert, dass Daten in den Puffer gecshrieben werden kšnnen
		this.status = 1;
	}

	public Hashtable<Integer, Logdatensatz> getPuffer() {
		return puffer;
	}

	public void setPuffer(Hashtable<Integer, Logdatensatz> puffer) {
		this.puffer = puffer;
	}

	/**
	 * putInPuffer
	 * 
	 * schriebt in den Puffer einen Logdatensatz und gibt eine 1 zurŸck, 
	 * falls noch platz fŸr weitere ist
	 * @param logdatensatz
	 * @return int 1: Zeigt an, noch platz bestand und der Datensatz eingefŸgt werden konnte
	 * @return int 0: Zeigt an, dass kein weiterer platz fŸr LogdatensŠtze besteht
	 */
	public int putInPuffer(Logdatensatz logdatensatz) {		
		if(puffer.size() <= 5) {
			puffer.put(logdatensatz.getPageId(), logdatensatz);
			System.out.println("Log mit PageId " + logdatensatz.getPageId() + "wurde geschrieben");
			
			// gibt zurŸck, dass noch platz zum einfŸgen war
			status = 1;
		}else{
			System.err.println("Log ist voll");
		}
		
		return this.status;
	}



	
}
