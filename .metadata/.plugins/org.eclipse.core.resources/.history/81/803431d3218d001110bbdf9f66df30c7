package de.dis2011.data.immobilien;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import de.dis2011.data.DB2ConnectionManager;


public class Haus extends Immobilie{
	private int id = -1;
	private int stockwerk;
	private int kaufpreis;
	private int garten;
	
	public int getIdHaus(){
		return id;
	}
	
	public void setIdHaus(int id){
		this.id = id;
	}

	public int getStockwerk(){
		return stockwerk;
	}
	
	public void setStockwerk(int stockwerk){
		this.stockwerk = stockwerk;
	}
	
	public int getKaufpreis(){
		return kaufpreis;
	}
	
	public void setKaufpreis(int kaufpreis){
		this.kaufpreis = kaufpreis;
	}
	
	public int getGarten(){
		return garten;
	}
	
	public void setGarten(int garten){
		this.garten = garten;
	}
	
	
	/**
	 * Läd eine Liste aller Makler aus der Datenbank
	 * @return Makler-Array
	 */
	public static ArrayList<Haus> load_all_haus() {
		try	{
			// Hole Verbindung
			Connection con = DB2ConnectionManager.getInstance().getConnection();
			
			// Erzeuge Anfrage
			String selectSQL = "SELECT id, id_immobilien, stockwerk, kaufpreis, garten FROM haus";
			PreparedStatement pstmt = con.prepareStatement(selectSQL);
			
			// Führe Anfrage aus
			ResultSet rs = pstmt.executeQuery();
			
			// Liste für alle Verträge (mit id)
			ArrayList<Haus> all_haus = new ArrayList<Haus>();
			
			while(rs.next()){
				Haus ts = new Haus();
				ts.setIdHaus(rs.getInt("id"));
				ts.setStockwerk(rs.getInt("stockwerk"));
				ts.setKaufpreis(rs.getInt("kaufpreis"));
				ts.setGarten(rs.getInt("garten"));
				
				all_haus.add(ts);

			}
			
			rs.close();
			pstmt.close();
			return all_haus;

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	
	/**
	 * Lädt einen Makler aus der Datenbank
	 * @param id ID des zu ladenden Maklers
	 * @return Makler-Instanz
	 */
	public static Haus load(int id) {
		try {
			//Haus ts = loadImmobilie(id);
			Haus ts = new Haus();
			
			// Hole Verbindung
			Connection con = DB2ConnectionManager.getInstance().getConnection();

			// Erzeuge Anfrage
			String selectSQL = "SELECT * FROM immobilien_haus WHERE id = ?";
			PreparedStatement pstmt = con.prepareStatement(selectSQL);
			pstmt.setInt(1, id);

			// Führe Anfrage aus
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				
				ts.setId(rs.getInt("id"));
				ts.set(rs.getInt("id_immobilien"));
				ts.setStockwerk(rs.getInt("stockwerk"));
				ts.setMietpreis(rs.getInt("mietpreis"));
				ts.setZimmer(rs.getInt("zimmer"));
				ts.setBalkon(rs.getInt("balkon"));
				ts.setEbk(rs.getInt("ebk"));

				rs.close();
				pstmt.close();
				return ts;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	
	/**
	 * Speichert die Wohnung
	 */
	public void save() {
		// Hole Verbindung
		Connection con = DB2ConnectionManager.getInstance().getConnection();

		try {
			// FC<ge neues Element hinzu, wenn das Objekt noch keine ID hat.
			if (getIdWohnung() == -1) {
				
				/*
				 * Speichere den Vertrag
				 */			
					
				super.saveImmobilie();
				
				
				/*
				 * Speichere den KAufvertrag
				 */
				String insertSQL = "INSERT INTO wohnung(id_immobilien, stockwerk, mietpreis, zimmer, balkon, ebk) VALUES (?, ?, ?, ?, ?, ?)";
				
				PreparedStatement pstmt = con.prepareStatement(insertSQL,
						Statement.RETURN_GENERATED_KEYS);

				pstmt.setInt(1, getId());
				pstmt.setInt(2, getStockwerk());
				pstmt.setInt(3, getMietpreis());
				pstmt.setInt(4, getZimmer());
				pstmt.setInt(5, getBalkon());
				pstmt.setInt(6, getEbk());
				pstmt.executeUpdate();

				// Hole die Id des engefC<gten Datensatzes
				ResultSet rs_kaufvertrag = pstmt.getGeneratedKeys();
				if (rs_kaufvertrag.next()) {
					setIdWohnung(rs_kaufvertrag.getInt(1));
				}
				
				rs_kaufvertrag.close();
				pstmt.close();
			} else {
				/*
				 * Speichere den Vertrag
				 */			
					
				saveImmobilie();
				
				
				// Falls schon eine ID vorhanden ist, mache ein Update...
				String updateSQL = "UPDATE wohnung SET id_immobilien = ?, stockwerk = ?, mietpreis = ?, zimmer = ?, balkon = ?, ebk = ? WHERE id = ?";
				PreparedStatement pstmt = con.prepareStatement(updateSQL);

				// Setze Anfrage Parameter
				pstmt.setInt(1, getId());
				pstmt.setInt(2, getStockwerk());
				pstmt.setInt(3, getMietpreis());
				pstmt.setInt(4, getZimmer());
				pstmt.setInt(5, getBalkon());
				pstmt.setInt(6, getEbk());
				pstmt.setInt(7, getIdWohnung());
				pstmt.executeUpdate();
				
				pstmt.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	/**
	 * Löscht einen Makler
	 * @param int die ID einer Maklers
	 */
	public static void delete(int id) {
		
		Immobilie.deleteImmobilie(id);

	}
	
	
	
}
